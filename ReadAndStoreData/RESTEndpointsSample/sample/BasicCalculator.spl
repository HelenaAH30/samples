namespace sample;


composite BasicCalculator
{
   graph
        (stream<Request> Operands) as IncomingRequest = Beacon()
    {
      param
        period: 0.5;
      output
       Operands: x = random(), 
                y =  random();
     }
      
    stream<tuple<Operation op>> OperationStream = Custom () {
        logic
         onProcess: {
            submit({op = add}, OperationStream);
        }
    }

    @view(name = "Results", port = Results, sampleSize = 100, bufferSize = 1000, description = "result data")
    (stream<Response> Results) as Calculator = CalculatorOp(Operands; OperationStream){

      }

     () as Printer = FileSink(Results)
    {
       logic
        onTuple Results:
        {
          printStringLn((rstring)Results);
        }
      param
        file: "/tmp/calculator_filesink.txt";
        flush: 1u;
    }
}

composite CalculatorOp (input Operands, OpStream; output Results){
  graph
  (stream<Response> Results) as Calculator = Custom(Operands; OpStream)
    {
      logic
        state :{
          mutable Operation currentOperation = add;
        }

        onTuple OpStream: {
          currentOperation = OpStream.op;
        }
        onTuple Operands:
        {
          mutable float64 myResult = 0.0;
          mutable rstring symbol = "";
          if (currentOperation == add)         {
            myResult = Operands.x + Operands.y;
            symbol = "+";
          }
          if  (currentOperation == subtract)
          {
            myResult = Operands.x - Operands.y;
            symbol = "-";
          }
          if  (currentOperation == multiply)
          {
            myResult = Operands.x * Operands.y;
            symbol = "*";
          } 
         if  (currentOperation == divide)
          {
            myResult = Operands.x / Operands.y;
            symbol = "/";
          }

          printStringLn(((rstring)Operands.x) + " " + symbol + " " + ((rstring)Operands.y) + " =  "  + ((rstring)myResult));
          mutable Results oTuple = {};
          assignFrom(oTuple, Operands);
          oTuple.op = currentOperation;
          oTuple.result = myResult;
          submit(oTuple, Results);
        }
    }
}